generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id               String   @id @default(cuid())
  email            String   @unique
  name             String
  avatar           String?
  role             UserRole @default(MEMBER)
  
  // BetterAuth integration
  emailVerified    Boolean   @default(false)
  emailVerifiedAt  DateTime?
  twoFactorEnabled Boolean   @default(false)
  
  // Firm relationship
  firmId    String?
  firm      Firm?   @relation(fields: [firmId], references: [id], onDelete: Cascade)
  
  // Project relationships
  projectMembers ProjectMember[]
  assignedTasks  Task[]
  timeEntries    TimeEntry[]
  
  // Audit trail
  auditLogs AuditLog[]
  
  // Comments
  comments Comment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([firmId])
  @@index([email])
  @@index([role])
  @@map("users")
}

// Firm/Organization
model Firm {
  id       String @id @default(cuid())
  name     String
  slug     String @unique
  domain   String?
  logo     String?
  settings Json?  @default("{}")
  
  // Subscription
  plan           SubscriptionPlan @default(FREE)
  subscriptionId String?
  
  // Relationships
  users    User[]
  projects Project[]
  clients  Client[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([slug])
  @@index([plan])
  @@map("firms")
}

// Project Management
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  type        ProjectType   @default(RESIDENTIAL)
  startDate   DateTime?
  endDate     DateTime?
  budget      Decimal?      @db.Decimal(12, 2)
  
  // Soft delete
  deletedAt DateTime?
  
  // Relationships
  firmId    String
  firm      Firm            @relation(fields: [firmId], references: [id], onDelete: Cascade)
  clientId  String?
  client    Client?         @relation(fields: [clientId], references: [id])
  members   ProjectMember[]
  tasks     Task[]
  files     File[]
  timeEntries TimeEntry[]
  comments  Comment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([firmId])
  @@index([status])
  @@index([type])
  @@index([clientId])
  @@index([deletedAt])
  @@map("projects")
}

model ProjectMember {
  id     String         @id @default(cuid())
  role   ProjectRole    @default(MEMBER)
  
  // Relationships
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  joinedAt DateTime @default(now())
  
  @@unique([userId, projectId])
  @@map("project_members")
}

// Task Management
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  startDate   DateTime?
  dueDate     DateTime?
  
  // Soft delete
  deletedAt DateTime?
  
  // Task dependencies
  dependencies Task[] @relation("TaskDependencies")
  dependents   Task[] @relation("TaskDependencies")
  
  // Relationships
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignee    User?   @relation(fields: [assigneeId], references: [id])
  timeEntries TimeEntry[]
  comments    Comment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([deletedAt])
  @@map("tasks")
}

// Client Management
model Client {
  id       String @id @default(cuid())
  name     String
  email    String
  phone    String?
  company  String?
  
  // Soft delete
  deletedAt DateTime?
  
  // Firm relationship
  firmId String
  firm   Firm   @relation(fields: [firmId], references: [id], onDelete: Cascade)
  
  // Projects
  projects Project[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([firmId])
  @@index([email])
  @@index([deletedAt])
  @@map("clients")
}

// File Management
model File {
  id          String @id @default(cuid())
  name        String
  originalName String
  mimeType    String
  size        Int
  s3Key       String @unique
  thumbnailUrl String?
  
  // Metadata
  metadata Json? @default("{}")
  
  // Relationships
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([projectId])
  @@index([uploadedBy])
  @@index([mimeType])
  @@map("files")
}

// Time Tracking
model TimeEntry {
  id          String   @id @default(cuid())
  description String?
  duration    Int      // Duration in seconds
  startTime   DateTime
  endTime     DateTime?
  
  // Relationships
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskId    String?
  task      Task?   @relation(fields: [taskId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([startTime])
  @@map("time_entries")
}

// Audit Logging for Compliance
model AuditLog {
  id        String   @id @default(cuid())
  action    String   // CREATE, UPDATE, DELETE
  entity    String   // Table name
  entityId  String   // Record ID
  oldValues Json?    // Previous values
  newValues Json?    // New values
  metadata  Json?    // Additional context (IP, user agent, etc.)
  
  // User relationship
  userId String?
  user   User?  @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@index([entity, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

// Enums
enum UserRole {
  OWNER
  ADMIN
  PROJECT_MANAGER
  DESIGNER
  MEMBER
  CLIENT
}

enum ProjectRole {
  LEAD
  MEMBER
  VIEWER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ProjectType {
  RESIDENTIAL
  COMMERCIAL
  RENOVATION
  CONSULTATION
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  BLOCKED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Comment System
model Comment {
  id        String @id @default(cuid())
  content   String
  
  // Relationships
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskId    String?
  task      Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  // Reply system
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  
  // Soft delete
  deletedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([parentId])
  @@index([deletedAt])
  @@map("comments")
}

enum SubscriptionPlan {
  FREE
  PROFESSIONAL
  ENTERPRISE
}